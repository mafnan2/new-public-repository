import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import CategoryCard from "../components/categoryCard";
import { nomineeType } from "../interface/nominee";

const Home: NextPage = () => {
  const [nominee, setNominee] = useState<Array<object>>([]);
  const [categories, setCategories] = useState<Array<object>>([]);

  useEffect(() => {
    getBallots();
  }, []);

  async function getBallots() {
    const response = await fetch(`http://localhost:3000/api/ballots`);
    const movies = await response.json();
    setCategories(movies.items);
  }

  const [modal, setModal] = useState<boolean>(false);

  const date = new Date().getFullYear();

  return (
    <>
      <Head>
        <title>Awards {date}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossOrigin="anonymous"
        />
        <link
          href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700;900&display=swap"
          rel="stylesheet"
        />
      </Head>




      <div className={"mx-auto container px-5 xl:px-0 pt-10"}>
      <h1 className="text-center text-white font-bold text-2xl pb-10">Awards {date}</h1>
        {categories &&
          categories?.map((item: nomineeType, idx: number) => {
            return (
              <CategoryCard
                setNominee={setNominee}
                nominee={nominee}
                item={item}
                idx={idx}
                key={idx}
              />
            );
          })}
      </div>

      {/* ballots button */}
      <button
        onClick={() => {
          setModal(true);
        }}
        disabled={nominee.length === 0}
        className="fixed disabled:cursor-not-allowed z-10 px-4 py-2 bg-basic rounded-md text-lg bottom-4 right-4 text-white font-medium"
      >
        Submit Ballot {nominee.length > 0 && <> ({nominee.length})</>}
      </button>

      {/* ballote modal */}

      {modal && (
        <>
          <div
            onClick={() => {
              setModal(false);
              setNominee([]);
            }}
            className="bg-black/30 fixed inset-0 w-full h-full z-40"
          />
          <div className="max-w-[320px] md:max-w-[500px] h-[250px] md:h-[300px] inset-0 m-auto bg-white p-4 rounded-md fixed z-50">
            <button
              onClick={() => {
                setModal(false);
                setNominee([]);
              }}
              className="absolute right-4 top-2"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="icon icon-tabler icon-tabler-x"
                width={16}
                height={16}
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="#2c3e50"
                fill="none"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M18 6l-12 12" />
                <path d="M6 6l12 12" />
              </svg>
            </button>
            <p className="text-center text-xl leading-5 mt-2 font-bold">
              Submitted Nominees
            </p>
            <ul className="flex flex-col gap-y-1 mt-6">
              {nominee.map((item: nomineeType, idx: number) => {
                return (
                  <li className="text-black text-sm md:text-base" key={idx}>
                    {idx + 1}: {item.title}
                  </li>
                );
              })}
            </ul>
          </div>
        </>
      )}
    </>
  );
};

export default Home;
